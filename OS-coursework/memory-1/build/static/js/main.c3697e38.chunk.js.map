{"version":3,"sources":["index.js"],"names":["Status","status","this","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","React","Component","DemandInput","onSubmit","type","value","processNumber","onChange","onNumberChange","processDemand","onDemandChange","Size","size","Strategy","className","handleStrategy","Controller","handleSize","submitSize","handleNumberChange","handleDemandChange","submitDemand","Displayed","showCase","style","width","groupNumber","Math","floor","memo","length","count","i","tempt","j","push","unit","id","menocase","toString","remain","map","item","key","to_show","MemoryAllocator","_this","Object","_Users_zhangzijian_WebstormProjects_learning_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_zhangzijian_WebstormProjects_learning_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_zhangzijian_WebstormProjects_learning_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","e","console","log","target","setState","strategy","number","parseInt","isNaN","handleNumber","current_processNumber","preventDefault","state","Array","fill","demand","new_demand","slice","thisNumber","thisDemand","current_processDemand","result","current_allocation","if_already","satisfied","t","splice","k","start","best_size","Infinity","best_begin","handelNumberChange","current_demand","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c3697e38.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './../node_modules/bulma/css/bulma.css';\n\n\n\nclass Status extends React.Component{\n    render() {\n        const {status} = this.props;\n        return(\n            <div>\n                <label>The allocation is</label>\n                <div>{status}</div>\n            </div>\n        );\n    }\n}\nclass DemandInput extends React.Component{\n    render() {\n        return(\n            <div>\n                <div>Please enter your demand in the following form</div>\n                <div>1 200</div>\n                <div>This means you want 200 units to be allocated to process 1</div>\n                <form onSubmit={this.props.onSubmit}>\n                    <label>\n                        ProcessNumber:\n                        <input type=\"number\" value={this.props.processNumber} onChange={this.props.onNumberChange} />\n                    </label>\n                    <label>\n                        ProcessDemand:\n                        <input type='number' value={this.props.processDemand} onChange={this.props.onDemandChange}/>\n                    </label>\n                    <input type=\"submit\" value=\"提交请求\" />\n                </form>\n            </div>\n        );\n    }\n\n}\nclass Size extends React.Component{\n    render() {\n        return (\n            <form onSubmit={this.props.onSubmit}>\n                <label>\n                    Name:\n                    <input type=\"text\" value={this.props.size} onChange={this.props.onChange} />\n                </label>\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n        );\n    }\n}\nclass Strategy extends React.Component{\n    render() {\n        return(\n            <div className=\"select\">\n                <select onChange={this.props.handleStrategy}>\n                    <option value='first'>首次适应</option>\n                    <option value='best'>最佳适应</option>\n                </select>\n            </div>\n        );\n    }\n}\nclass Controller extends React.Component{\n    render() {\n        return(\n            <div>\n                <Strategy handleStrategy = {this.props.handleStrategy}/>\n                <Size onChange={this.props.handleSize}\n                      size = {this.props.size}\n                      onSubmit = {this.props.submitSize}\n                />\n                <DemandInput onNumberChange={this.props.handleNumberChange}\n                             processDemand = {this.props.processDemand}\n                             processNumber = {this.props.processNumber}\n                             onDemandChange = {this.props.handleDemandChange}\n                             onSubmit = {this.props.submitDemand}\n                />\n                <Status status={this.props.status}/>\n            </div>\n        );\n    }\n}\nclass Displayed extends React.Component{\n    render() {\n        let showCase = [];\n        const style = {\n            'width': '40px',\n        };\n        let groupNumber = Math.floor(this.props.memo.length / 20);\n        let count = 0;\n        for(let i = 0;i<groupNumber;i++){\n            let tempt = [];\n            for(let j = 0;j<20;j++){\n                tempt.push({unit:this.props.memo[count],id:count});\n                count++;\n            }\n            showCase.push({menocase:tempt,id:i.toString()});\n        }\n        let remain = [];\n        for(;count<this.props.memo.length;count++){\n            remain.push({unit:this.props.memo[count],id:count});\n        }\n        if(remain.length!==0) {\n            showCase.push({menocase:remain,id:groupNumber});\n        }\n        return(\n            <div>\n                {\n                    showCase.map((item)=>{\n                        return (\n                            <div key={item.id} className='buttons'>\n                                {\n                                    item.menocase.map((unit)=>{\n                                        let to_show = null;\n                                        if(unit.unit===-1){\n                                            to_show = unit.unit;\n                                        }else {\n                                            to_show = <b>{unit.unit}</b>\n                                        }\n                                        return (\n                                            <button style={style} key={unit.id}>{to_show}</button>\n                                        );\n                                    })\n                                }\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        );\n    }\n\n}\nclass MemoryAllocator extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state ={\n          strategy : 'first',\n          size : 400,\n          current_processNumber :0,\n          current_processDemand: 0,\n          demand : [],\n          result:'',\n          memo : Array(400).fill(-1),\n        };\n    }\n    handleStrategy = (e)=>{\n        console.log(e.target.value);\n        this.setState(\n            {strategy:e.target.value}\n        )\n    };\n    handleSize = (e)=>{\n        let number = parseInt(e.target.value);\n        if(isNaN(number)){\n            number = 0;\n        }\n        this.setState({\n            size:number\n        });\n        console.log(number);\n    };\n    handleNumber = (e)=>{\n        console.log(e.target.value);\n        this.setState({\n            current_processNumber:e.target.value\n        })\n\n    };\n    submitSize = (e)=>{\n        e.preventDefault();\n        //alert('Size is submitted!');\n        console.log('size is '+this.state.size);\n        this.setState({\n            memo:Array(this.state.size).fill(-1),\n            demand:[]\n        })\n    };\n    submitDemand = (e)=>{\n        e.preventDefault();\n        //alert('demand submitted!');\n        let new_demand = this.state.demand.slice();\n        const thisNumber = parseInt(this.state.current_processNumber);\n        const thisDemand = parseInt(this.state.current_processDemand);\n        if(isNaN(thisNumber)||isNaN(thisDemand)){\n            this.setState({\n                result:'Invalid input!'\n            });\n            return;\n        }\n        let current_allocation = this.state.memo.slice();\n\n        let if_already = false;\n        for(let i = 0;i<new_demand.length;i++){\n            if(new_demand[i].processNumber === thisNumber){\n                new_demand[i].processDemand += thisDemand;\n                new_demand[i].satisfied = 1;\n                if(new_demand[i].processDemand<=0){\n                    for (let t = 0; t < current_allocation.length;t++){\n                        if(current_allocation[t]===new_demand[i].processNumber){\n                            current_allocation[t]=-1;\n                        }\n                    }\n                    this.setState({\n                        result:'Delete process'+ new_demand[i].processNumber,\n                    });\n                    new_demand.splice(i,1);\n                }\n                this.setState({\n                    demand : new_demand\n                });\n                if_already = true;\n            }\n        }\n        if(!if_already && thisDemand<=0){\n            return;\n        }\n        // 0 nothing\n        // 1 modified\n        // 2 OK\n        if(!if_already){\n            new_demand.push({processNumber:thisNumber,processDemand:thisDemand,satisfied:0});\n            this.setState({\n                demand : new_demand\n            });\n        }\n        console.log(new_demand);\n        //TODO 如果不够大，直接删除整个程序。\n        for(let k = 0;k<new_demand.length;k++){\n            let demand = new_demand[k];\n            console.log('current demand'+demand);\n            if(demand.satisfied===0){\n                if(this.state.strategy==='first'){\n                    for(let i = 0;i<current_allocation.length;i++){\n                        if(current_allocation[i]===-1){\n                            let start = i;\n                            while (i < current_allocation.length && current_allocation[start]===-1 && start-i + 1!== demand.processDemand){\n                                start++;\n                            }\n                            if(start-i+1===demand.processDemand){\n                                for (let j = i; j <= start; j++) {\n                                    current_allocation[j]=demand.processNumber;\n                                }\n                                demand.satisfied = 2;\n                                this.setState({\n                                    result:'Distribution of # '+demand.processNumber+' is OK'\n                                });\n                                break;\n                            }\n                        }\n                    }\n                    if(demand.satisfied!==2) {\n                        this.setState({\n                            result: 'Distribution of # ' + demand.processNumber + ' failed!'\n                        })\n                        new_demand.splice(k,1);\n                    }\n                }\n                else {\n                    let best_size = Infinity;\n                    let best_begin = -1;\n                    for(let i = 0;i<current_allocation.length;i++){\n                        if(current_allocation[i]===-1){\n                            let start = i;\n                            while (start<current_allocation.length && current_allocation[start] === -1) {\n                                start++;\n                            }\n                            let size = start - i + 1;\n                            if(size>=demand.processDemand && size<best_size){\n                                best_size = size;\n                                best_begin = i;\n                            }\n                            i = start;\n                        }\n                    }\n                    console.log('best'+best_begin+'  '+best_size);\n                    if(best_size!==Infinity){\n                        for(let i = 0;i<demand.processDemand;i++){\n                            current_allocation[best_begin++]=demand.processNumber;\n                        }\n                        this.setState({\n                            result:'Distribution of # '+demand.processNumber+' is OK'\n                        });\n                        demand.satisfied = 2;\n                    }else {\n                        this.setState({\n                            result: 'Distribution of # ' + demand.processNumber + ' failed!'\n                        })\n                        new_demand.splice(k,1);\n                    }\n                }\n            }else if(demand.satisfied===1){\n                let i = 0;\n                for(;i<current_allocation.length;i++){\n                    if(current_allocation[i]===demand.processNumber){\n                        break;\n                    }\n                }\n                let start = i;\n                while (i < current_allocation.length && (current_allocation[start]===-1||current_allocation[start]===demand.processNumber)\n                        && start-i + 1!== demand.processDemand){\n                    start++;\n                }\n                if(start-i+1===demand.processDemand){\n                    for (let j = i; j <= start; j++) {\n                        current_allocation[j]=demand.processNumber;\n                    }\n                    demand.satisfied = 2;\n                    if(start+1<current_allocation.length && current_allocation[++start]===demand.processNumber){\n                        while (start<current_allocation.length && current_allocation[start]===demand.processNumber){\n                            current_allocation[start]=-1;\n                            start++;\n                        }\n                    }\n                    this.setState({\n                        result:'Distribution of # '+demand.processNumber+' is OK'\n                    });\n                }\n                if(demand.satisfied!==2){\n                    while (current_allocation[i]===demand.processNumber){\n                        current_allocation[i]=-1;\n                        i++;\n                    }\n                    demand.satisfied = 0;\n                    k--;\n                }\n\n            }\n        }\n        console.log(current_allocation);\n        this.setState({\n            memo:current_allocation,\n        })\n\n    };\n    handelNumberChange = (e)=>{\n        console.log(e.target.value);\n        this.setState({\n            current_processNumber:e.target.value\n        });\n    };\n    handleDemandChange = (e)=>{\n        console.log(e.target.value);\n        this.setState({\n            current_processDemand:e.target.value\n        });\n    };\n\n\n    render() {\n        return(\n            <div className='container'>\n                <div className='columns'>\n                    <div className='column is-one-quarter'>\n                        <Controller\n                            handleStrategy = {this.handleStrategy}\n                            handleSize = {this.handleSize}\n                            submitSize = {this.submitSize}\n                            handleNumberChange = {this.handelNumberChange}\n                            handleDemandChange = {this.handleDemandChange}\n                            submitDemand = {this.submitDemand}\n                            demand = {this.state.current_demand}\n                            status = {this.state.result}\n                            size = {this.state.size}\n                        />\n                    </div>\n                    <div className='column'>\n                        <Displayed\n                            memo = {this.state.memo}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n// ========================================\n\nReactDOM.render(\n    <MemoryAllocator />,\n    document.getElementById('root')\n);\nif(module.hot){\n    module.hot.accept();\n}\n\n\n"],"sourceRoot":""}